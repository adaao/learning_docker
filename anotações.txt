link dos videos do curso: https://www.youtube.com/playlist?list=PLf-O3X2-mxDkiUH0r_BadgtELJ_qyrFJ_

* Os comando devem ser executados em um terminal root ou você deve adicionar o seu
* usuário ao grupo do docker.

os namespaces fornecem os isolamentos necessários aos
containers e o cgroups, os recursos de hardware.

netfilter é um módulo do iptables;


videos assistidos:

introdução;

00;

01;

02;

03;

04;

05;

06;

docker run hello-world
   roda o hello world

docker ps
   mostra os containers

docker ps -a  
   mostra todos os containers que já foram criados

docker run -ti "nome_da_imagem" /bin/bash
   -ti disponibiliza um terminal interativo, com a opção -d roda em background
   /bin/bash é o terminal que será usado

para terminar e sair do container:
   ctrl + d
 
para sair do container sem terminá-lo:
   ctrl + p + q
   
docker attach "id_do_container" entra no container.

criar container sem ininiá-lo:
   docker create "nome_da_imagem"

iniciar ou para container
   docker start/stop/pause/unpause "id_do_container"

mostrar status do container
   docker stats "id_do_container"

mostrar id dos processos do container
   docker top "id_do_container"

informações do container
   docker log "id_do_container"

remover container
   docker rm "id do container"
   se o container estiver rodando será preciso forçar a parada com o parâmetro "-f"

07;

nomear o container
	--name
	exemplo:
		docker run -ti --name teste debian

verificar a memória do container
	docker inspect id_do_container | grep -i mem

limitar memoria
	docker run -ti --memory 512m --name novo_teste debian

alterar container
	docker update
		exemplo: docker update -m 256m nome_do_container
		também funciona para --cpu-shares

limitar cpu
	--cpu-shares
		exemplo: docker run -ti --cpu-shares 1024 --name container1 debian

	para definição de proporção, deve-se basear no numero passado.
	"Hoje já tem a opção --cpus, onde vc determina um percentual do CPU. Por ex, --cpus 0.50, estou dizendo 		para limitar em meio core. --cpus 2, seria pra dois cores e por ae vai."

08;

criar e montar volume
   -v "diretorio"
		exemplo: docker run -ti --name volume -v /nome/do/volume ubuntu /bin/bash

mostrar volume criado no container
   docker inspect -f {{.Mounts}} "nome do container"

subir container escolhendo o diretorio montado
	docker run -ti -v /caminho/do/diretorio/a/ser/montado:/nome_do_compartilhamento

comando usado para criar container a ter espaço compartilhado
	docker create -v /data --name dbdados centos

comando usado para criar container postgresql durante a aula:
	docker run -d -p 5432:5432 --name pgsql1 --volumes-from dbdados -e POSTGRESQL_USER=docker -e POSTGRESQL_PASS=docker -e POSTGRESQL_DB=docker kamui/postgresql

o parâmetro -p expões a porta do container, -e passa valores para variável de ambiente do container, --volume-from monta um diretório compartilhado por outro container.


09;

Dockerfile

A primeira linha do Dockerfile deve ser o comando FROM que é usado para definir qual 
imagem será usada como base para o container. Ex.:

FROM debian

O comando RUN serve para executar comandos. Cada "RUN" cria uma camada de forma que não é 
interessante ter vários RUN no docker file. O melhor cenário é a concatenação de vários comandos 
em um RUN. Ex.:

RUN apt-get update && apt-get install apache2 && apt-get clean


ENTRYPOINT recebe por parâmetro qual deve ser o principal processo do container.
Se algo acontecer com esse processo, o container "morre". Caso seja usado, o CMD se torna apenas um parâmetro 
para o binário citado no ENTRYPOINT. 

10;

build

Para construir uma imagem a partir de um Dockerfile
	docker build -t nome_escolhido_para_a_imagem:numero_da_versão

exemplo:
	docker build -t haskell_container:1.0 .

O ponto no final aponta para o diretorio atual. Não se aponta para o arquivo Dockerfile,
se aponta para o diretorio onde ele está.

11;

docker build -t webs:1.0 .

docker run -d --rm --name webs -p 1234:80 webs:1.0


12;

docker hub

Antes de qualquer coisa é preciso logar no docker hub ou no hub que você usa...

	docker login     ou     docker login link_do_seu_hub

Para subir a imagem para o docker hub é preciso colocar o nome do usuário
na imagem. No caso de a imagem já existir bastar usar o comando 'tag' deguindo o formato
'docker tag id_da_sua_imagem seu_usuário_no_dockehub/sua_imagem:número_da_versão', exemplo:
	
	docker tag dfd621844998 container_creator/apache2_webserver:1.0

para subir a imagem para o docker hub:
	
	docker push usuari/imagem:versão

*é preciso estar logado

13;

Criando nosso registry...

	docker run -d -p 5000:5000 --restart=always --name registry registry:2

-d -> Roda em background

-p -> Mapeia a porta. A porta do resgistry é 5000

--restart=always -> Se der algum problema no containner ele reinicia

--name registry -> Nome escolhido para a imagem. Poderia ser qualquer coisa.

registry:2 -> Imagem escolhida. Neste caso, versão 2 da Registry.


Push para o nosso registry...

Antes de fazer o push é preciso "taguear" a imagem à ser "empurrada" para o registry seguindo
o formato que fora usado para o docker hub, mas ao invés de usar seu nome/nome_da_imagem usaremos
o ip ou dns ou o que for aplicável, dois pontos porta, barra nome da imagem:

	docker tag dfd621844998 localhost:5000/webs:1.0

Depois disso basta usar o push...

	docker push localhost:5000/webs:1.0

Para fazer o caminho inverso basta usar o "pull" no lugar do push.

Quer visualizar as imagens do seu registry?

	curl localhost:5000/v2/_catalog

14;

Opções de rede...

--dns -> Passa um servidor de dns para o container
	docker run -ti --dns 8.8.8.8 debian

--hostname -> define um hostname para o container
	docker run -ti --hostname foo debian

--link -> "Linka" um container a outro. Por exemplo, criemos um container qualquer...

	docker run -ti --name container1 debian
   
   Saia do container sem matá-lo

	ctrl + p + q
  
   Agora criemos outro container que será "linkado" ao primeiro...

	docker run -ti --link container1 --name container2 --hostname container2 debian  

   Já no terminal do container2 dê um ping no container1

	ping container1

   Você verá que ele será encontrado, que está sendo enxergado pelo container2.

--expose -> Expõe a porta do container desejada.

	docker run -d --expose 80 webserver:1.0

--publish -p -> Realiza o bind entre portas, em outras palavras, faz o redirecionamento. 

	docker run -d --rm --publish 8080:80 webserver:1.0

			ou

	docker run -d -p 8080:80 webserver:1.0

--mac-address -> Define um mac address para o container

	docker run -d --mac-address 12:34:56:78:90:ab

--net -> Usado para definir o stack de rede do conatainer. Ao criar um container, o container é iniciado
   em modo bridge. Com o parâmetro --net podemos alterar isso. Por exemplo o comando

	docker run -ti --net=host debian

   define que nosso container debian use o stack de rede do nosso host. 
   Se tivessemos o apache instalado neste container teríamos que usar as informações 
   de rede do nosso host para acessá-lo.

   *NÃO É RECOMENDADO ESTE TIPO DE USO, mas pode ser usado para "quebrar um galho" 
   para algum serviço de rede que pode ser encontrado em sua rede local, por exemplo.
   - Use com moderação.

15;

Host Docker

Link dos releases: https://github.com/docker/machine/releases/

No caso do linux, será preciso instalar o virtual box

	# apt-get update && apt-get install virtualbox -y

Para criar o host será usado o comando 'create' do docker machine e através do parâmetro --driver
passaremos a tecnologia de virtualização. Poderia ser AWS, Google e afins, mas neste momento 
usaremos o virtual box.

	docker-machine create --driver virtualbox meuprimeirodockerhost

Para mais detalhes consulte a documentação: https://docs.docker.com/machine/get-started/

16;

Conectando ao host docker

Podemos obter as informações de conexão do host com o comando
	
	docker-machine env nome_do_hostdocker

Para conectarmos usaremos o comando eval que deve aparecer no final das 
informações obtidas com o comando anterior

	eval $(docker-machine env nome_do_hostdocker)

Após este comando estaremos conectado ao host docker. Podemos verificar se estamos no 
host com o comando 

	docker ps -a

Como acabamos de criar o host, não deve aparecer nenhum container.

Podemos testar o funcionamento do host com a criação de um container simples

	docker run --name teste busybox echo "Você está no host docker"

Com o parâmetro 'ip' podemos verificaro ip do host, que pode ser usado para se conectar
 por ssh por exemplo, mas a melhor abordagem é através do comando 'ssh':

	docker-machine ssh nome_do_hostdocker

Podemos usar o comando inspect para visualisar informações do host

	docker-machine inspect nome_do_host

Os comando start, stop e rm funcionam da mesma forma que nós já vimos

	docker-machine stop nome_do_host

	docker-machine start nome_do_host

	docker-machine rm nome_do_host 

17;

Docker compose

Alguns comandos...

#build = Indica o caminho do seu Dockerfile
build: .


#command = Executa um comando 
command: bundle exec thin -p 3000


#container_name = Dá um nome para o container 
container_name: my-web-container


#dns = indica o dns server
dns: 8.8.8.8


#dns_search = Especifica um search domain 
dns_search: example.com


#dockerfile = Especifica um Dockerfile alternativo
dockerfile: = Dockerfile-alternativo


#env_file = Especifica um arquivo com variáveis de ambiente
env_file: /varambiente/env


#environment = Adiciona variáveis de ambiente
environment:
 RACK_ENV:development


#expose = Expõe a porta do container
expose:
 - "3000"
 - "8000"


#external_links - "Linka" containers que não estão especificado no docker-compose atual
external_links:
 - redis_1
 - project_db_1:mysql


#extra_hosts = Adiciona uma entrada no /etc/hosts do container
extra_hosts:
 - "somehost:162.242.195.82"
 - "otherhost:50.31.209.229"


#image = Indica uma imagem
image: ubuntu:18.04


#labels = Adiciona metadata ao container 
labels:
 com.example.description: "Accounting webapp"
 com.example.departament: "Finance"


#links = "Linka" containers dentro do mesmo docker-compose
links:
 - db
 - db:database


#log_driver = Indica o formato do log a ser gerado, por ex: syslog, json-file, etc
log_driver: syslog
#ou
logging:
 driver:syslog


#log_opt = Indica onde mandar os logs, pode ser local ou em um syslog remoto
log_opt:
 syslog-address: "tcp://192.168.1.42:123"
#ou
logging:
 driver:syslog
 options:
  syslog-address: "tcp://192.168.1.42:123"


#net = Modo de uso da rede
net:"bridge"
net:"host"


#ports = expõe as portas do container e do host
ports:
 - "3000"
 - "80:9000"


#volumes, volume_driver = Monta volumes no container
volume
 - /var/lib/mysql
 - /opt/data:/var/lib/mysql
 - ./cache:/tmp/cache


#volumes_from = Monta volumes através de outro container
volumes_from:
 - service_name
 - service_name:ro

18;

Docker compose, continuação

O docker compose usa comando parecidos com o que foi visto até agora (start, stop, ps, etc.). O destaque fica
para o comando 'scale' que permite escalar o número de containers. Por exemplo:

	docker-compose scale db=2

Que escala para 2 o número de containers 'db' que temos.

.












