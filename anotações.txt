link dos videos do curso: https://www.youtube.com/playlist?list=PLf-O3X2-mxDkiUH0r_BadgtELJ_qyrFJ_

* Os comando devem ser executados em um terminal root

os namespaces fornecem os isolamentos necessários aos
containers e o cgroups, os recursos de hardware.

netfilter é um módulo do iptables;


videos assistidos:

introdução;

00;

01;

02;

03;

04;

05;

06;

docker run hello-world
   roda o hello world

docker ps
   mostra os containers

docker ps -a  
   mostra todos os containers que já foram criados

docker run -ti "nome_da_imagem" /bin/bash
   -ti disponibiliza um terminal interativo, com a opção -d roda em background
   /bin/bash é o terminal que será usado

para terminar e sair do container:
   ctrl + d
 
para sair do container sem terminá-lo:
   ctrl + p + q
   
docker attach "id_do_container" entra no container.

criar container sem ininiá-lo:
   docker create "nome_da_imagem"

iniciar ou para container
   docker start/stop/pause/unpause "id_do_container"

mostrar status do container
   docker stats "id_do_container"

mostrar id dos processos do container
   docker top "id_do_container"

informações do container
   docker log "id_do_container"

remover container
   docker rm "id do container"
   se o container estiver rodando será preciso forçar a parada com o parâmetro "-f"

07;

nomear o container
	--name
	exemplo:
		docker run -ti --name teste debian

verificar a memória do container
	docker inspect id_do_container | grep -i mem

limitar memoria
	docker run -ti --memory 512m --name novo_teste debian

alterar container
	docker update
		exemplo: docker update -m 256m nome_do_container
		também funciona para --cpu-shares

limitar cpu
	--cpu-shares
		exemplo: docker run -ti --cpu-shares 1024 --name container1 debian

	para definição de proporção, deve-se basear no numero passado.
	"Hoje já tem a opção --cpus, onde vc determina um percentual do CPU. Por ex, --cpus 0.50, estou dizendo 		para limitar em meio core. --cpus 2, seria pra dois cores e por ae vai."

08;

criar e montar volume
   -v "diretorio"
		exemplo: docker run -ti --name volume -v /nome/do/volume ubuntu /bin/bash

mostrar volume criado no container
   docker inspect -f {{.Mounts}} "nome do container"

subir container escolhendo o diretorio montado
	docker run -ti -v /caminho/do/diretorio/a/ser/montado:/nome_do_compartilhamento

comando usado para criar container a ter espaço compartilhado
	docker create -v /data --name dbdados centos

comando usado para criar container postgresql durante a aula:
	docker run -d -p 5432:5432 --name pgsql1 --volumes-from dbdados -e POSTGRESQL_USER=docker -e POSTGRESQL_PASS=docker -e POSTGRESQL_DB=docker kamui/postgresql

o parâmetro -p expões a porta do container, -e passa valores para variável de ambiente do container, --volume-from monta um diretório compartilhado por outro container.


09;

Dockerfile

A primeira linha do Dockerfile deve ser o comando FROM que é usado para definir qual 
imagem será usada como base para o container. Ex.:

FROM debian

O comando RUN serve para executar comandos. Cada "RUN" cria uma camada de forma que não é 
interessante ter vários RUN no docker file. O melhor cenário é a concatenação de vários comandos 
em um RUN. Ex.:

RUN apt-get update && apt-get install apache2 && apt-get clean


ENTRYPOINT recebe por parâmetro qual deve ser o principal processo do container.
Se algo acontecer com esse processo, o container "morre". Caso seja usado, o CMD se torna apenas um parâmetro 
para o binário citado no ENTRYPOINT. 

10;

build

Para construir uma imagem a partir de um Dockerfile
	docker build -t nome_escolhido_para_a_imagem:numero_da_versão

exemplo:
	docker build -t haskell_container:1.0 .

O ponto no final aponta para o diretorio atual. Não se aponta para o arquivo Dockerfile,
se aponta para o diretorio onde ele está.
















